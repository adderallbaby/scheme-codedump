(define (make-multi-vector . xs)
  (define (folded vector)
    
    (vector-set! vector 1 (car xs))
    (vector-set! vector 0 "This is a multi-vector!")
    vector)
  
         
    
  (if (null? (cdr xs))
      (folded (make-vector 3 (make-vector (helper (car xs)))))
      (folded (make-vector 3 (make-vector (helper (car xs)) (cadr xs))))
      )
  )
(define (multi-vector? vec)
  (equal? (vector-ref vec 0) "This is a multi-vector!"))
(define (helper sizes)
  (define (folded sizes number)
    (if (null? sizes)
        number
        (folded (cdr sizes) (* number (car sizes))))
    )
  (folded sizes 1))
(define (multi-vector-set! vector indexess value)
  (define (folded indexes sizes number number2 step)
    (if (null? indexes)
        (vector-set! (vector-ref vector 2) number value)
        (if (= 0 step)
            (folded (cdr indexes) sizes (car indexes) (car indexes) (+ 1 step))
            (folded (cdr indexes) (cdr sizes) (+ number (* number2 (car indexes) )) (* number2 (car sizes)) (+ 1 step)))))
  (folded (reverse indexess) (vector-ref vector 1) 1 (car indexess) 0))
(define (multi-vector-ref vector indexess)
  (define (folded indexes sizes number number2 step)
    (if (null? indexes)
        (vector-ref (vector-ref vector 2) number)
        (if (= 0 step)
            (folded (cdr indexes) sizes (car indexes) (car indexes) (+ 1 step))
            (folded (cdr indexes) (cdr sizes) (+ number (* number2 (car indexes) )) (* number2 (car sizes)) (+ 1 step)))))
  (folded (reverse indexess) (vector-ref vector 1) 1 (car indexess) 0))