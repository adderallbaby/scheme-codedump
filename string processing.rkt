(define (string-trim-left string)
  (define (folded string)
    (if (char-whitespace? (string-ref string 0))
        (folded (substring string 1))
        string
        )
    )
  (folded string)
  )
(define (string-trim-right string)
  (list->string (reverse (string->list  (string-trim-left (list->string (reverse (string->list string)))))))
  )
(define (string-trim string)
  (string-trim-right (string-trim-left string))
  
  )
(define (string-prefix? string2 string1)
  (equal? (substring string1 0 (string-length string2)) string2)
  )
(define (string-suffix? string2 string1)
  (equal? (substring string1 (- (string-length string1) (string-length string2))) string2)
  )
(define (string-infix? string1 string2)
  (define (folded s1 s2)
    (if (= (string-length s1) (string-length s2))
        (equal? s1 s2)  
        (if (string-prefix? s1 s2)
            #t
            (folded s1 (substring s2 1))
            )
        )
    )
  (folded string1 string2)
  )
(define (string-split str sep)
  (define (folded string lst q)
    (if (>= (string-length sep) (string-length string ))
        (if (not (equal? string sep))
            (cons string lst)
            (lst)
            )
        (if (equal? (substring string 0 q) sep)
            (folded (substring string q) lst q)
            (folded (substring string 1) (cons (substring string 0 1) lst) q))
    ))
  (folded str (list) (string-length sep))
          
  )
    
