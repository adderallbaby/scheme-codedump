(define (expression->number expression)
  (string->number (list->string expression)))
(define (get-sign str)
  (if (equal? (car str) #\-)
      '-
      '+))
(define (crop-sign str)
  (if (or (equal? (car str) #\-)
          (equal? (car str) #\+))
      (cdr str)
      str))


(define (dict-ref dict key)
  (cadr (assoc key dict)))

(define (numeric? char)
  (let ((code (char->integer char)))
    (and (> code 47) (< code 58))))

(define (exp-frac loop-variable)
  (let ((expressions (list (list 'sign (get-sign loop-variable)) (list 'num '()) (list 'denom '()))))
    (let exp-loop ((loop-variable (crop-sign loop-variable)) (stage 'num))
      (if (not (null? loop-variable))
          (let ((char (car loop-variable)) (other (cdr loop-variable)))
            (if (equal? char #\/)
                (if (equal? stage 'num)
                    (exp-loop other 'denom)
                    (set-car! (cdr (assoc stage expressions)) '()))
                (if (numeric? char)
                    (begin (set-car! (cdr (assoc stage expressions)) (append (cadr (assoc stage expressions)) (list char)))
                           (exp-loop other stage))
                    (set-car! (cdr (assoc stage expressions)) '()))))))
    expressions))

(define (check-frac str)
  (let ((expressions (exp-frac (string->list str))))
    (and (not (null? (dict-ref expressions 'num)))
         (not (null? (dict-ref expressions 'denom))))))