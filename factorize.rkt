(define-syntax test
  (syntax-rules ()
    ((test term res) (list (quote term) res))))
(define (factorize xs)
  (if (and (= (length xs) 3)
           (or (and (= (caddr (cadr xs)) 2) (= (caddr (caddr xs)) 2))
               (and (= (caddr (cadr xs)) 3) (= (caddr (caddr xs)) 3))))
      (let ((plus (equal? (car xs) '+))
            (squared (= (caddr (cadr xs)) 2))
            (x (cadr (cadr xs)))
            (y (cadr (caddr xs))))
        (cond ((and (not plus) squared)
               `(* (- ,x ,y) (+ ,x ,y)))
              ((and (not plus) (not squared))
               `(* (- ,x ,y) (+ (expt ,x 2) (* ,x ,y) (expt ,y 2))))
              ((and plus (not squared))
               `(* (+ ,x ,y) (+ (expt ,x 2) (- (* ,x ,y)) (expt ,y 2))))))
      xs))
