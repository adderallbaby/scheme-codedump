(define (count x xs)
      (define (fold x xs n)
        (if (null? xs)
            n
            (if (equal? x (car xs))
                (fold x (cdr xs) (+ 1 n))
                (fold x (cdr xs) n))))
        (fold x xs 0)
        
  )
     

(define (makeset xs)
  (define (folded xsf newlist)
    (if (null? xsf)
        newlist
        (if  (= 1 (count (car xsf) xsf))
             (folded (cdr xsf) (append (list (car xsf)) newlist))
             (folded (cdr xsf) newlist)
             )
    ))
  (folded xs (list))
  )
(define (set? xs)
  (define (folded newlist alllist)
    (if (null? newlist)
        (null? newlist)
        (if (= 1(count (car newlist) alllist))
            (folded (cdr newlist) xs)
            #f
         )
        )
    )
  (folded xs xs))
(define (union set1 set2)
  (makeset (append set1 set2))
  )
(define (intersection set1 set2)
  (define (folded set1 set2 result)
    (if (null? set1)
        res
        (if (> (count (car set1) set2) 0)
            (folded (cdr set1) set2 (cons (car set1) result))
            (folded (cdr set1) set2 res)
)))
(folded set1 set2 (list)))

(define (difference xs1 xs2)
  (define (folded set1 set2 newset)
    (if (null? set1)
        newset
        (if (= (count (car set1) set2) 0)
            (folded (cdr set1) set2 (cons (car set1) newset))
            (folded (cdr set1) set2 newset)
            )
        )
    )
  (folded xs1 xs2 (list))
  )
(define (symmetric-difference xs1 xs2)
  (difference (union xs1 xs2) (intersection xs1 xs2))
  )
(define (every-in xs1 xs2)
  (define (folded set1 set2)
    (if (null? set1)
        (null? set1)
        (if (= 1 (count (car set1) set2))
            (folded (cdr set1) set2)
            #f
            )
        )
    )
  (folded xs1 xs2)
  )
(define (set-eq? xs1 xs2)
  (and (every-in xs1 xs2) (every-in xs2 xs1))
  )
      
  